// Generating mock for: PluginClient in file: /home/hiraqdev/projects/personal/quadroops/goplugin/proto/plugin/mocks/PluginClient.go
// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	plugin "github.com/quadroops/goplugin/proto/plugin"
)

// PluginClient is an autogenerated mock type for the PluginClient type
type PluginClient struct {
	mock.Mock
}

// Exec provides a mock function with given fields: ctx, in, opts
func (_m *PluginClient) Exec(ctx context.Context, in *plugin.ExecRequest, opts ...grpc.CallOption) (*plugin.ExecResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *plugin.ExecResponse
	if rf, ok := ret.Get(0).(func(context.Context, *plugin.ExecRequest, ...grpc.CallOption) *plugin.ExecResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugin.ExecResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *plugin.ExecRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *PluginClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*plugin.PingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *plugin.PingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *plugin.PingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugin.PingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
