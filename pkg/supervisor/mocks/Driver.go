// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	supervisor "github.com/quadroops/goplugin/pkg/supervisor"
	mock "github.com/stretchr/testify/mock"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// OnError provides a mock function with given fields: event, handlers
func (_m *Driver) OnError(event *supervisor.Payload, handlers ...supervisor.OnErrorHandler) {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Watch provides a mock function with given fields:
func (_m *Driver) Watch() <-chan *supervisor.Payload {
	ret := _m.Called()

	var r0 <-chan *supervisor.Payload
	if rf, ok := ret.Get(0).(func() <-chan *supervisor.Payload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *supervisor.Payload)
		}
	}

	return r0
}
